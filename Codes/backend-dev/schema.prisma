// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String          @id @default(cuid())
  name                    String          @default("")
  email                   String          @unique @default("")
  phone                   String          @default("")
  password                String
  role                    UserRoleType?   @default(tenant)
  status                  UserStatusType? @default(active) @map("status")
  tenant                  Tenant?         @relation("User_tenant", fields: [tenantId], references: [id])
  tenantId                String?         @map("tenant")
  subTenants              Tenant[]        @relation("Tenant_parents")
  createdAt               DateTime?       @default(now())
  updatedAt               DateTime?       @updatedAt
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([tenantId])
}

model Tenant {
  id          String            @id @default(cuid())
  name        String            @default("")
  location    String            @default("")
  description String            @default("")
  status      TenantStatusType? @default(active) @map("status")
  owners      User[]            @relation("User_tenant")
  parents     User[]            @relation("Tenant_parents")
  parent      Tenant?           @relation("Tenant_parent", fields: [parentId], references: [id])
  parentId    String?           @map("parent")
  children    Tenant[]          @relation("Tenant_parent")
  facilities  Facility[]        @relation("Facility_tenants")
  devices     Device[]          @relation("Device_tenant")
  resources   Resource[]        @relation("Resource_tenant")
  createdAt   DateTime?         @default(now())
  updatedAt   DateTime?         @updatedAt

  @@index([parentId])
}

model Facility {
  id        String              @id @default(cuid())
  name      String              @unique @default("")
  status    FacilityStatusType? @default(active) @map("status")
  tenants   Tenant[]            @relation("Facility_tenants")
  devices   Device[]            @relation("Device_facility")
  createdAt DateTime?           @default(now())
  updatedAt DateTime?           @updatedAt
}

model Device {
  id           String            @id @default(cuid())
  name         String            @default("")
  deviceId     String            @unique @default("")
  deviceReads  DeviceRead[]      @relation("DeviceRead_device")
  edgeDeviceId String            @default("")
  portNumber   String            @default("")
  description  String            @default("")
  status       DeviceStatusType? @default(active) @map("status")
  tenant       Tenant?           @relation("Device_tenant", fields: [tenantId], references: [id])
  tenantId     String?           @map("tenant")
  facility     Facility?         @relation("Device_facility", fields: [facilityId], references: [id])
  facilityId   String?           @map("facility")
  resource     Resource?         @relation("Device_resource", fields: [resourceId], references: [id])
  resourceId   String?           @map("resource")
  deviceType   DeviceType?       @relation("Device_deviceType", fields: [deviceTypeId], references: [id])
  deviceTypeId String?           @map("deviceType")
  createdAt    DateTime?         @default(now())
  updatedAt    DateTime?         @updatedAt

  @@index([tenantId])
  @@index([facilityId])
  @@index([resourceId])
  @@index([deviceTypeId])
}

model Resource {
  id               String                       @id @default(cuid())
  name             String                       @unique @default("")
  status           ResourceStatusType?          @default(active) @map("status")
  capacity         Float                        @default(0)
  unit             ResourceUnitType             @default(ltr)
  resourceCategory ResourceResourceCategoryType @map("resourceCategory")
  devices          Device[]                     @relation("Device_resource")
  tenant           Tenant?                      @relation("Resource_tenant", fields: [tenantId], references: [id])
  tenantId         String?                      @map("tenant")
  createdAt        DateTime?                    @default(now())
  updatedAt        DateTime?                    @updatedAt

  @@index([tenantId])
}

model DeviceType {
  id               String                         @id @default(cuid())
  name             String                         @unique @default("")
  description      String                         @default("")
  scale            Json?                          @default("{\"something\":true}")
  unit             DeviceTypeUnitType?
  resourceCategory DeviceTypeResourceCategoryType @map("resourceCategory")
  status           DeviceTypeStatusType?          @default(active) @map("status")
  devices          Device[]                       @relation("Device_deviceType")
  createdAt        DateTime?                      @default(now())
  updatedAt        DateTime?                      @updatedAt
}

model DeviceRead {
  id        String    @id @default(cuid())
  device    Device?   @relation("DeviceRead_device", fields: [deviceId], references: [id])
  deviceId  String?   @map("device")
  value     Decimal   @postgresql.Decimal(18, 4)
  createdAt DateTime? @default(now())

  @@index([deviceId])
}

enum UserRoleType {
  admin
  tenant
  user
}

enum UserStatusType {
  blocked
  active
  inactive
}

enum TenantStatusType {
  blocked
  active
  inactive
}

enum FacilityStatusType {
  blocked
  active
  inactive
}

enum DeviceStatusType {
  blocked
  active
  inactive
}

enum ResourceStatusType {
  blocked
  active
  inactive
}

enum ResourceUnitType {
  ltr
  kw
}

enum ResourceResourceCategoryType {
  water
  power
  sewage_treatment
}

enum DeviceTypeUnitType {
  ltr
  kw
}

enum DeviceTypeResourceCategoryType {
  water
  power
  sewage_treatment
}

enum DeviceTypeStatusType {
  blocked
  active
  inactive
}