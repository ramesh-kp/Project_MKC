# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  phone: String
  password: PasswordState
  role: UserRoleType
  status: UserStatusType
  tenant: Tenant
  subTenants(
    where: TenantWhereInput! = {}
    orderBy: [TenantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tenant!]
  subTenantsCount(where: TenantWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  admin
  tenant
  user
}

enum UserStatusType {
  blocked
  active
  inactive
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phone: StringFilter
  role: UserRoleTypeNullableFilter
  status: UserStatusTypeNullableFilter
  tenant: TenantWhereInput
  subTenants: TenantManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input UserStatusTypeNullableFilter {
  equals: UserStatusType
  in: [UserStatusType!]
  notIn: [UserStatusType!]
  not: UserStatusTypeNullableFilter
}

input TenantManyRelationFilter {
  every: TenantWhereInput
  some: TenantWhereInput
  none: TenantWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  role: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  phone: String
  password: String
  role: UserRoleType
  status: UserStatusType
  tenant: TenantRelateToOneForUpdateInput
  subTenants: TenantRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input TenantRelateToOneForUpdateInput {
  create: TenantCreateInput
  connect: TenantWhereUniqueInput
  disconnect: Boolean
}

input TenantRelateToManyForUpdateInput {
  disconnect: [TenantWhereUniqueInput!]
  set: [TenantWhereUniqueInput!]
  create: [TenantCreateInput!]
  connect: [TenantWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  phone: String
  password: String
  role: UserRoleType
  status: UserStatusType
  tenant: TenantRelateToOneForCreateInput
  subTenants: TenantRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input TenantRelateToOneForCreateInput {
  create: TenantCreateInput
  connect: TenantWhereUniqueInput
}

input TenantRelateToManyForCreateInput {
  create: [TenantCreateInput!]
  connect: [TenantWhereUniqueInput!]
}

type Tenant {
  id: ID!
  name: String
  location: String
  description: String
  status: TenantStatusType
  owners(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  ownersCount(where: UserWhereInput! = {}): Int
  parents(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  parentsCount(where: UserWhereInput! = {}): Int
  parent: Tenant
  children(
    where: TenantWhereInput! = {}
    orderBy: [TenantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tenant!]
  childrenCount(where: TenantWhereInput! = {}): Int
  facilities(
    where: FacilityWhereInput! = {}
    orderBy: [FacilityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  devices(
    where: DeviceWhereInput! = {}
    orderBy: [DeviceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Device!]
  devicesCount(where: DeviceWhereInput! = {}): Int
  resources(
    where: ResourceWhereInput! = {}
    orderBy: [ResourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
  deviceReadSum(
    from: DateTime! = "2022-03-15T15:06:02.568Z"
    to: DateTime! = "2022-03-22T15:06:02.568Z"
  ): Float
  deviceReadAvg(
    from: DateTime! = "2022-03-15T15:06:02.569Z"
    to: DateTime! = "2022-03-22T15:06:02.569Z"
  ): Float
  deviceReadCurrent(
    from: DateTime! = "2022-03-15T15:06:02.569Z"
    to: DateTime! = "2022-03-22T15:06:02.569Z"
  ): Float
  createdAt: DateTime
  updatedAt: DateTime
}

enum TenantStatusType {
  blocked
  active
  inactive
}

input TenantWhereUniqueInput {
  id: ID
}

input TenantWhereInput {
  AND: [TenantWhereInput!]
  OR: [TenantWhereInput!]
  NOT: [TenantWhereInput!]
  id: IDFilter
  name: StringFilter
  location: StringFilter
  description: StringFilter
  status: TenantStatusTypeNullableFilter
  owners: UserManyRelationFilter
  parents: UserManyRelationFilter
  parent: TenantWhereInput
  children: TenantManyRelationFilter
  facilities: FacilityManyRelationFilter
  devices: DeviceManyRelationFilter
  resources: ResourceManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TenantStatusTypeNullableFilter {
  equals: TenantStatusType
  in: [TenantStatusType!]
  notIn: [TenantStatusType!]
  not: TenantStatusTypeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input FacilityManyRelationFilter {
  every: FacilityWhereInput
  some: FacilityWhereInput
  none: FacilityWhereInput
}

input DeviceManyRelationFilter {
  every: DeviceWhereInput
  some: DeviceWhereInput
  none: DeviceWhereInput
}

input ResourceManyRelationFilter {
  every: ResourceWhereInput
  some: ResourceWhereInput
  none: ResourceWhereInput
}

input TenantOrderByInput {
  id: OrderDirection
  name: OrderDirection
  location: OrderDirection
  description: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TenantUpdateInput {
  name: String
  location: String
  description: String
  status: TenantStatusType
  owners: UserRelateToManyForUpdateInput
  parents: UserRelateToManyForUpdateInput
  parent: TenantRelateToOneForUpdateInput
  children: TenantRelateToManyForUpdateInput
  facilities: FacilityRelateToManyForUpdateInput
  devices: DeviceRelateToManyForUpdateInput
  resources: ResourceRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input FacilityRelateToManyForUpdateInput {
  disconnect: [FacilityWhereUniqueInput!]
  set: [FacilityWhereUniqueInput!]
  create: [FacilityCreateInput!]
  connect: [FacilityWhereUniqueInput!]
}

input DeviceRelateToManyForUpdateInput {
  disconnect: [DeviceWhereUniqueInput!]
  set: [DeviceWhereUniqueInput!]
  create: [DeviceCreateInput!]
  connect: [DeviceWhereUniqueInput!]
}

input ResourceRelateToManyForUpdateInput {
  disconnect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

input TenantUpdateArgs {
  where: TenantWhereUniqueInput!
  data: TenantUpdateInput!
}

input TenantCreateInput {
  name: String
  location: String
  description: String
  status: TenantStatusType
  owners: UserRelateToManyForCreateInput
  parents: UserRelateToManyForCreateInput
  parent: TenantRelateToOneForCreateInput
  children: TenantRelateToManyForCreateInput
  facilities: FacilityRelateToManyForCreateInput
  devices: DeviceRelateToManyForCreateInput
  resources: ResourceRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input FacilityRelateToManyForCreateInput {
  create: [FacilityCreateInput!]
  connect: [FacilityWhereUniqueInput!]
}

input DeviceRelateToManyForCreateInput {
  create: [DeviceCreateInput!]
  connect: [DeviceWhereUniqueInput!]
}

input ResourceRelateToManyForCreateInput {
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

type Facility {
  id: ID!
  name: String
  status: FacilityStatusType
  tenants(
    where: TenantWhereInput! = {}
    orderBy: [TenantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tenant!]
  tenantsCount(where: TenantWhereInput! = {}): Int
  devices(
    where: DeviceWhereInput! = {}
    orderBy: [DeviceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Device!]
  devicesCount(where: DeviceWhereInput! = {}): Int
  deviceReadSum(
    from: DateTime! = "2022-03-15T15:06:02.569Z"
    to: DateTime! = "2022-03-22T15:06:02.569Z"
  ): Float
  deviceReadAvg(
    from: DateTime! = "2022-03-15T15:06:02.569Z"
    to: DateTime! = "2022-03-22T15:06:02.569Z"
  ): Float
  deviceReadCurrent(
    from: DateTime! = "2022-03-15T15:06:02.569Z"
    to: DateTime! = "2022-03-22T15:06:02.569Z"
  ): Float
  createdAt: DateTime
  updatedAt: DateTime
}

enum FacilityStatusType {
  blocked
  active
  inactive
}

input FacilityWhereUniqueInput {
  id: ID
  name: String
}

input FacilityWhereInput {
  AND: [FacilityWhereInput!]
  OR: [FacilityWhereInput!]
  NOT: [FacilityWhereInput!]
  id: IDFilter
  name: StringFilter
  status: FacilityStatusTypeNullableFilter
  tenants: TenantManyRelationFilter
  devices: DeviceManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FacilityStatusTypeNullableFilter {
  equals: FacilityStatusType
  in: [FacilityStatusType!]
  notIn: [FacilityStatusType!]
  not: FacilityStatusTypeNullableFilter
}

input FacilityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FacilityUpdateInput {
  name: String
  status: FacilityStatusType
  tenants: TenantRelateToManyForUpdateInput
  devices: DeviceRelateToManyForUpdateInput
}

input FacilityUpdateArgs {
  where: FacilityWhereUniqueInput!
  data: FacilityUpdateInput!
}

input FacilityCreateInput {
  name: String
  status: FacilityStatusType
  tenants: TenantRelateToManyForCreateInput
  devices: DeviceRelateToManyForCreateInput
}

type Device {
  id: ID!
  name: String
  deviceId: String
  deviceReads(
    where: DeviceReadWhereInput! = {}
    orderBy: [DeviceReadOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeviceRead!]
  deviceReadsCount(where: DeviceReadWhereInput! = {}): Int
  deviceReadSum(
    from: DateTime! = "2022-03-15T15:06:02.570Z"
    to: DateTime! = "2022-03-22T15:06:02.570Z"
  ): Float
  deviceReadAvg(
    from: DateTime! = "2022-03-15T15:06:02.570Z"
    to: DateTime! = "2022-03-22T15:06:02.570Z"
  ): Float
  deviceReadCurrent(
    from: DateTime! = "2022-03-15T15:06:02.570Z"
    to: DateTime! = "2022-03-22T15:06:02.570Z"
  ): Float
  edgeDeviceId: String
  portNumber: String
  description: String
  status: DeviceStatusType
  tenant: Tenant
  facility: Facility
  resource: Resource
  deviceType: DeviceType
  createdAt: DateTime
  updatedAt: DateTime
}

enum DeviceStatusType {
  blocked
  active
  inactive
}

input DeviceWhereUniqueInput {
  id: ID
  deviceId: String
}

input DeviceWhereInput {
  AND: [DeviceWhereInput!]
  OR: [DeviceWhereInput!]
  NOT: [DeviceWhereInput!]
  id: IDFilter
  name: StringFilter
  deviceId: StringFilter
  deviceReads: DeviceReadManyRelationFilter
  edgeDeviceId: StringFilter
  portNumber: StringFilter
  description: StringFilter
  status: DeviceStatusTypeNullableFilter
  tenant: TenantWhereInput
  facility: FacilityWhereInput
  resource: ResourceWhereInput
  deviceType: DeviceTypeWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input DeviceReadManyRelationFilter {
  every: DeviceReadWhereInput
  some: DeviceReadWhereInput
  none: DeviceReadWhereInput
}

input DeviceStatusTypeNullableFilter {
  equals: DeviceStatusType
  in: [DeviceStatusType!]
  notIn: [DeviceStatusType!]
  not: DeviceStatusTypeNullableFilter
}

input DeviceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  deviceId: OrderDirection
  edgeDeviceId: OrderDirection
  portNumber: OrderDirection
  description: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DeviceUpdateInput {
  name: String
  deviceId: String
  deviceReads: DeviceReadRelateToManyForUpdateInput
  edgeDeviceId: String
  portNumber: String
  description: String
  status: DeviceStatusType
  tenant: TenantRelateToOneForUpdateInput
  facility: FacilityRelateToOneForUpdateInput
  resource: ResourceRelateToOneForUpdateInput
  deviceType: DeviceTypeRelateToOneForUpdateInput
}

input DeviceReadRelateToManyForUpdateInput {
  disconnect: [DeviceReadWhereUniqueInput!]
  set: [DeviceReadWhereUniqueInput!]
  create: [DeviceReadCreateInput!]
  connect: [DeviceReadWhereUniqueInput!]
}

input FacilityRelateToOneForUpdateInput {
  create: FacilityCreateInput
  connect: FacilityWhereUniqueInput
  disconnect: Boolean
}

input ResourceRelateToOneForUpdateInput {
  create: ResourceCreateInput
  connect: ResourceWhereUniqueInput
  disconnect: Boolean
}

input DeviceTypeRelateToOneForUpdateInput {
  create: DeviceTypeCreateInput
  connect: DeviceTypeWhereUniqueInput
  disconnect: Boolean
}

input DeviceUpdateArgs {
  where: DeviceWhereUniqueInput!
  data: DeviceUpdateInput!
}

input DeviceCreateInput {
  name: String
  deviceId: String
  deviceReads: DeviceReadRelateToManyForCreateInput
  edgeDeviceId: String
  portNumber: String
  description: String
  status: DeviceStatusType
  tenant: TenantRelateToOneForCreateInput
  facility: FacilityRelateToOneForCreateInput
  resource: ResourceRelateToOneForCreateInput
  deviceType: DeviceTypeRelateToOneForCreateInput
}

input DeviceReadRelateToManyForCreateInput {
  create: [DeviceReadCreateInput!]
  connect: [DeviceReadWhereUniqueInput!]
}

input FacilityRelateToOneForCreateInput {
  create: FacilityCreateInput
  connect: FacilityWhereUniqueInput
}

input ResourceRelateToOneForCreateInput {
  create: ResourceCreateInput
  connect: ResourceWhereUniqueInput
}

input DeviceTypeRelateToOneForCreateInput {
  create: DeviceTypeCreateInput
  connect: DeviceTypeWhereUniqueInput
}

type Resource {
  id: ID!
  name: String
  status: ResourceStatusType
  capacity: Float
  unit: ResourceUnitType
  resourceCategory: ResourceResourceCategoryType
  devices(
    where: DeviceWhereInput! = {}
    orderBy: [DeviceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Device!]
  devicesCount(where: DeviceWhereInput! = {}): Int
  tenant: Tenant
  deviceReadSum(
    from: DateTime! = "2022-03-15T15:06:02.571Z"
    to: DateTime! = "2022-03-22T15:06:02.571Z"
  ): Float
  deviceReadAvg(
    from: DateTime! = "2022-03-15T15:06:02.571Z"
    to: DateTime! = "2022-03-22T15:06:02.571Z"
  ): Float
  deviceReadCurrent(
    from: DateTime! = "2022-03-15T15:06:02.571Z"
    to: DateTime! = "2022-03-22T15:06:02.571Z"
  ): Float
  createdAt: DateTime
  updatedAt: DateTime
}

enum ResourceStatusType {
  blocked
  active
  inactive
}

enum ResourceUnitType {
  ltr
  kw
}

enum ResourceResourceCategoryType {
  water
  power
  sewage_treatment
}

input ResourceWhereUniqueInput {
  id: ID
  name: String
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
  id: IDFilter
  name: StringFilter
  status: ResourceStatusTypeNullableFilter
  capacity: FloatFilter
  unit: ResourceUnitTypeNullableFilter
  resourceCategory: ResourceResourceCategoryTypeNullableFilter
  devices: DeviceManyRelationFilter
  tenant: TenantWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ResourceStatusTypeNullableFilter {
  equals: ResourceStatusType
  in: [ResourceStatusType!]
  notIn: [ResourceStatusType!]
  not: ResourceStatusTypeNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input ResourceUnitTypeNullableFilter {
  equals: ResourceUnitType
  in: [ResourceUnitType!]
  notIn: [ResourceUnitType!]
  not: ResourceUnitTypeNullableFilter
}

input ResourceResourceCategoryTypeNullableFilter {
  equals: ResourceResourceCategoryType
  in: [ResourceResourceCategoryType!]
  notIn: [ResourceResourceCategoryType!]
  not: ResourceResourceCategoryTypeNullableFilter
}

input ResourceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  capacity: OrderDirection
  unit: OrderDirection
  resourceCategory: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ResourceUpdateInput {
  name: String
  status: ResourceStatusType
  capacity: Float
  unit: ResourceUnitType
  resourceCategory: ResourceResourceCategoryType
  devices: DeviceRelateToManyForUpdateInput
  tenant: TenantRelateToOneForUpdateInput
}

input ResourceUpdateArgs {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateInput!
}

input ResourceCreateInput {
  name: String
  status: ResourceStatusType
  capacity: Float
  unit: ResourceUnitType
  resourceCategory: ResourceResourceCategoryType
  devices: DeviceRelateToManyForCreateInput
  tenant: TenantRelateToOneForCreateInput
}

type DeviceType {
  id: ID!
  name: String
  description: String
  scale: JSON
  unit: DeviceTypeUnitType
  resourceCategory: DeviceTypeResourceCategoryType
  status: DeviceTypeStatusType
  devices(
    where: DeviceWhereInput! = {}
    orderBy: [DeviceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Device!]
  devicesCount(where: DeviceWhereInput! = {}): Int
  deviceReadSum(
    from: DateTime! = "2022-03-15T15:06:02.571Z"
    to: DateTime! = "2022-03-22T15:06:02.571Z"
  ): Float
  deviceReadAvg(
    from: DateTime! = "2022-03-15T15:06:02.572Z"
    to: DateTime! = "2022-03-22T15:06:02.572Z"
  ): Float
  deviceReadCurrent(
    from: DateTime! = "2022-03-15T15:06:02.572Z"
    to: DateTime! = "2022-03-22T15:06:02.572Z"
  ): Float
  createdAt: DateTime
  updatedAt: DateTime
}

enum DeviceTypeUnitType {
  ltr
  kw
}

enum DeviceTypeResourceCategoryType {
  water
  power
  sewage_treatment
}

enum DeviceTypeStatusType {
  blocked
  active
  inactive
}

input DeviceTypeWhereUniqueInput {
  id: ID
  name: String
}

input DeviceTypeWhereInput {
  AND: [DeviceTypeWhereInput!]
  OR: [DeviceTypeWhereInput!]
  NOT: [DeviceTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  unit: DeviceTypeUnitTypeNullableFilter
  resourceCategory: DeviceTypeResourceCategoryTypeNullableFilter
  status: DeviceTypeStatusTypeNullableFilter
  devices: DeviceManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input DeviceTypeUnitTypeNullableFilter {
  equals: DeviceTypeUnitType
  in: [DeviceTypeUnitType!]
  notIn: [DeviceTypeUnitType!]
  not: DeviceTypeUnitTypeNullableFilter
}

input DeviceTypeResourceCategoryTypeNullableFilter {
  equals: DeviceTypeResourceCategoryType
  in: [DeviceTypeResourceCategoryType!]
  notIn: [DeviceTypeResourceCategoryType!]
  not: DeviceTypeResourceCategoryTypeNullableFilter
}

input DeviceTypeStatusTypeNullableFilter {
  equals: DeviceTypeStatusType
  in: [DeviceTypeStatusType!]
  notIn: [DeviceTypeStatusType!]
  not: DeviceTypeStatusTypeNullableFilter
}

input DeviceTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  unit: OrderDirection
  resourceCategory: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DeviceTypeUpdateInput {
  name: String
  description: String
  scale: JSON
  unit: DeviceTypeUnitType
  resourceCategory: DeviceTypeResourceCategoryType
  status: DeviceTypeStatusType
  devices: DeviceRelateToManyForUpdateInput
}

input DeviceTypeUpdateArgs {
  where: DeviceTypeWhereUniqueInput!
  data: DeviceTypeUpdateInput!
}

input DeviceTypeCreateInput {
  name: String
  description: String
  scale: JSON
  unit: DeviceTypeUnitType
  resourceCategory: DeviceTypeResourceCategoryType
  status: DeviceTypeStatusType
  devices: DeviceRelateToManyForCreateInput
}

type DeviceRead {
  id: ID!
  device: Device
  value: Decimal
  createdAt: DateTime
}

scalar Decimal

input DeviceReadWhereUniqueInput {
  id: ID
}

input DeviceReadWhereInput {
  AND: [DeviceReadWhereInput!]
  OR: [DeviceReadWhereInput!]
  NOT: [DeviceReadWhereInput!]
  id: IDFilter
  device: DeviceWhereInput
  value: DecimalFilter
  createdAt: DateTimeNullableFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input DeviceReadOrderByInput {
  id: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
}

input DeviceReadUpdateInput {
  device: DeviceRelateToOneForUpdateInput
  value: Decimal
}

input DeviceRelateToOneForUpdateInput {
  create: DeviceCreateInput
  connect: DeviceWhereUniqueInput
  disconnect: Boolean
}

input DeviceReadUpdateArgs {
  where: DeviceReadWhereUniqueInput!
  data: DeviceReadUpdateInput!
}

input DeviceReadCreateInput {
  device: DeviceRelateToOneForCreateInput
  value: Decimal
}

input DeviceRelateToOneForCreateInput {
  create: DeviceCreateInput
  connect: DeviceWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTenant(data: TenantCreateInput!): Tenant
  createTenants(data: [TenantCreateInput!]!): [Tenant]
  updateTenant(where: TenantWhereUniqueInput!, data: TenantUpdateInput!): Tenant
  updateTenants(data: [TenantUpdateArgs!]!): [Tenant]
  deleteTenant(where: TenantWhereUniqueInput!): Tenant
  deleteTenants(where: [TenantWhereUniqueInput!]!): [Tenant]
  createFacility(data: FacilityCreateInput!): Facility
  createFacilities(data: [FacilityCreateInput!]!): [Facility]
  updateFacility(
    where: FacilityWhereUniqueInput!
    data: FacilityUpdateInput!
  ): Facility
  updateFacilities(data: [FacilityUpdateArgs!]!): [Facility]
  deleteFacility(where: FacilityWhereUniqueInput!): Facility
  deleteFacilities(where: [FacilityWhereUniqueInput!]!): [Facility]
  createDevice(data: DeviceCreateInput!): Device
  createDevices(data: [DeviceCreateInput!]!): [Device]
  updateDevice(where: DeviceWhereUniqueInput!, data: DeviceUpdateInput!): Device
  updateDevices(data: [DeviceUpdateArgs!]!): [Device]
  deleteDevice(where: DeviceWhereUniqueInput!): Device
  deleteDevices(where: [DeviceWhereUniqueInput!]!): [Device]
  createResource(data: ResourceCreateInput!): Resource
  createResources(data: [ResourceCreateInput!]!): [Resource]
  updateResource(
    where: ResourceWhereUniqueInput!
    data: ResourceUpdateInput!
  ): Resource
  updateResources(data: [ResourceUpdateArgs!]!): [Resource]
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteResources(where: [ResourceWhereUniqueInput!]!): [Resource]
  createDeviceType(data: DeviceTypeCreateInput!): DeviceType
  createDeviceTypes(data: [DeviceTypeCreateInput!]!): [DeviceType]
  updateDeviceType(
    where: DeviceTypeWhereUniqueInput!
    data: DeviceTypeUpdateInput!
  ): DeviceType
  updateDeviceTypes(data: [DeviceTypeUpdateArgs!]!): [DeviceType]
  deleteDeviceType(where: DeviceTypeWhereUniqueInput!): DeviceType
  deleteDeviceTypes(where: [DeviceTypeWhereUniqueInput!]!): [DeviceType]
  createDeviceRead(data: DeviceReadCreateInput!): DeviceRead
  createDeviceReads(data: [DeviceReadCreateInput!]!): [DeviceRead]
  updateDeviceRead(
    where: DeviceReadWhereUniqueInput!
    data: DeviceReadUpdateInput!
  ): DeviceRead
  updateDeviceReads(data: [DeviceReadUpdateArgs!]!): [DeviceRead]
  deleteDeviceRead(where: DeviceReadWhereUniqueInput!): DeviceRead
  deleteDeviceReads(where: [DeviceReadWhereUniqueInput!]!): [DeviceRead]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  phone: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  tenants(
    where: TenantWhereInput! = {}
    orderBy: [TenantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tenant!]
  tenant(where: TenantWhereUniqueInput!): Tenant
  tenantsCount(where: TenantWhereInput! = {}): Int
  facilities(
    where: FacilityWhereInput! = {}
    orderBy: [FacilityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Facility!]
  facility(where: FacilityWhereUniqueInput!): Facility
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  devices(
    where: DeviceWhereInput! = {}
    orderBy: [DeviceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Device!]
  device(where: DeviceWhereUniqueInput!): Device
  devicesCount(where: DeviceWhereInput! = {}): Int
  resources(
    where: ResourceWhereInput! = {}
    orderBy: [ResourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resource!]
  resource(where: ResourceWhereUniqueInput!): Resource
  resourcesCount(where: ResourceWhereInput! = {}): Int
  deviceTypes(
    where: DeviceTypeWhereInput! = {}
    orderBy: [DeviceTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeviceType!]
  deviceType(where: DeviceTypeWhereUniqueInput!): DeviceType
  deviceTypesCount(where: DeviceTypeWhereInput! = {}): Int
  deviceReads(
    where: DeviceReadWhereInput! = {}
    orderBy: [DeviceReadOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DeviceRead!]
  deviceRead(where: DeviceReadWhereUniqueInput!): DeviceRead
  deviceReadsCount(where: DeviceReadWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
